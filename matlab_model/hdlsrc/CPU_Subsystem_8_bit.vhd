-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\CPU_Subsystem_8_bit.vhd
-- Created: 2014-03-05 16:19:14
-- 
-- Generated by MATLAB 7.12 and Simulink HDL Coder 2.1
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1
-- Target subsystem base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ext_out                       ce_out        1
-- hlt                           ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: CPU_Subsystem_8_bit
-- Source Path: hdlcodercpu_eml/CPU_Subsystem_8_bit
-- Hierarchy Level: 0
-- 
-- Simulink model description for hdlcodercpu_eml:
-- 
-- An 8-bit RISC Processor using MATLAB(R) Function Blocks
-- This model shows how to use Simulink(R) HDL Coder(TM) to check, 
-- generate and verify HDL for an 8-bit CPU implemented using the 
-- MATLAB Function Block.
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY CPU_Subsystem_8_bit IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        master_reset                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        ext_out                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
        hlt                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END CPU_Subsystem_8_bit;


ARCHITECTURE rtl OF CPU_Subsystem_8_bit IS

  -- Component Declarations
  COMPONENT PC_Incrementer
    PORT( jmp_offset                      :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          PC_current                      :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          PC_next                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Program_Counter
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          func                            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          addr_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          addr_out                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Instruction_ROM
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          addr                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          read                            :   IN    std_logic;  -- ufix1
          instr_out                       :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
          );
  END COMPONENT;

  COMPONENT Instruction_Register
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          func                            :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          IR_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          IR_out                          :   OUT   std_logic_vector(11 DOWNTO 0)  -- ufix12
          );
  END COMPONENT;

  COMPONENT Arithmetic_Logical_Unit_8_bit
    PORT( in_flags                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          func                            :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          alu_in                          :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          AC                              :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          alu_out                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
          out_flags                       :   OUT   std_logic_vector(3 DOWNTO 0)  -- ufix4
          );
  END COMPONENT;

  COMPONENT Shifter_8_bit
    PORT( select_rsvd                     :   IN    std_logic_vector(1 DOWNTO 0);  -- ufix2
          input                           :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in_flags                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          out_flags                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          shift_out                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT Control_Unit
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          data_in                         :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          in_flags                        :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          master_rst                      :   IN    std_logic;
          IR_in                           :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
          shifter_sel                     :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          out_flags                       :   OUT   std_logic_vector(3 DOWNTO 0);  -- ufix4
          ALU_func                        :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          print_data                      :   OUT   std_logic;
          DM_addr                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
          DM_r_w                          :   OUT   std_logic;  -- ufix1
          AC_func                         :   OUT   std_logic_vector(2 DOWNTO 0);  -- ufix3
          AC_data                         :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
          IR_func                         :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          PC_func                         :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          addr_inc                        :   OUT   std_logic_vector(7 DOWNTO 0);  -- int8
          IM_read                         :   OUT   std_logic;  -- ufix1
          hlt                             :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Accumulator
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          func                            :   IN    std_logic_vector(2 DOWNTO 0);  -- ufix3
          AC_in1                          :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          AC_in2                          :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          AC_out                          :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT SinglePortRAM_Inst0
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          din                             :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          addr                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          we                              :   IN    std_logic;
          dout                            :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  COMPONENT output_enable
    PORT( u                               :   IN    std_logic_vector(7 DOWNTO 0);  -- int8
          enable                          :   IN    std_logic;
          y                               :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : PC_Incrementer
    USE ENTITY work.PC_Incrementer(rtl);

  FOR ALL : Program_Counter
    USE ENTITY work.Program_Counter(rtl);

  FOR ALL : Instruction_ROM
    USE ENTITY work.Instruction_ROM(rtl);

  FOR ALL : Instruction_Register
    USE ENTITY work.Instruction_Register(rtl);

  FOR ALL : Arithmetic_Logical_Unit_8_bit
    USE ENTITY work.Arithmetic_Logical_Unit_8_bit(rtl);

  FOR ALL : Shifter_8_bit
    USE ENTITY work.Shifter_8_bit(rtl);

  FOR ALL : Control_Unit
    USE ENTITY work.Control_Unit(rtl);

  FOR ALL : Accumulator
    USE ENTITY work.Accumulator(rtl);

  FOR ALL : SinglePortRAM_Inst0
    USE ENTITY work.SinglePortRAM_Inst0(rtl);

  FOR ALL : output_enable
    USE ENTITY work.output_enable(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Unit_Delay_7_out1                : std_logic;
  SIGNAL Shifter_8_bit_out2               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Shifter_8_bit_out2_signed        : signed(7 DOWNTO 0);  -- int8
  SIGNAL Unit_Delay2_out1                 : signed(7 DOWNTO 0);  -- int8
  SIGNAL Program_Counter_out1             : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Program_Counter_out1_unsigned    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Unit_Delay_4_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL jmp_offset                       : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL PC_Incrementer_out1              : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Control_Unit_out10               : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Control_Unit_out12               : std_logic;  -- ufix1
  SIGNAL Instruction_ROM_out1             : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Control_Unit_out9                : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Instruction_Register_out1        : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL Instruction_Register_out1_unsigned : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Unit_Delay_1_out1                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Control_Unit_out2                : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Control_Unit_out3                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Data_Memory_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Accumulator_out1                 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Arithmetic_Logical_Unit_8_bit_out1 : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Arithmetic_Logical_Unit_8_bit_out2 : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Control_Unit_out1                : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL Shifter_8_bit_out1               : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL Shifter_8_bit_out1_unsigned      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Unit_Delay_3_out1                : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Data_Memory_out1_signed          : signed(7 DOWNTO 0);  -- int8
  SIGNAL feedback_for_indirect_addressing : signed(7 DOWNTO 0);  -- int8
  SIGNAL Control_Unit_out4                : std_logic;
  SIGNAL Control_Unit_out5                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Control_Unit_out6                : std_logic;  -- ufix1
  SIGNAL Control_Unit_out7                : std_logic_vector(2 DOWNTO 0);  -- ufix3
  SIGNAL Control_Unit_out8                : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Control_Unit_out13               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL output_enable_out1               : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL output_enable_out1_signed        : signed(7 DOWNTO 0);  -- int8
  SIGNAL Unit_Delay_6_out1                : signed(7 DOWNTO 0);  -- int8
  SIGNAL Accumulator_out1_signed          : signed(7 DOWNTO 0);  -- int8

BEGIN
  -- loading into AC
  -- 
  -- writing computation back into AC
  -- 
  -- Instruction to be executed

  -- <S1>/PC Incrementer
  u_PC_Incrementer : PC_Incrementer
    PORT MAP( jmp_offset => jmp_offset,  -- int8
              PC_current => std_logic_vector(Unit_Delay_4_out1),  -- uint8
              PC_next => PC_Incrementer_out1  -- uint8
              );

  -- <S1>/Program Counter
  u_Program_Counter : Program_Counter
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              func => Control_Unit_out10,  -- ufix2
              addr_in => PC_Incrementer_out1,  -- uint8
              addr_out => Program_Counter_out1  -- uint8
              );

  -- <S1>/Instruction ROM
  u_Instruction_ROM : Instruction_ROM
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              addr => Program_Counter_out1,  -- uint8
              read => Control_Unit_out12,  -- ufix1
              instr_out => Instruction_ROM_out1  -- ufix12
              );

  -- <S1>/Instruction Register
  u_Instruction_Register : Instruction_Register
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              func => Control_Unit_out9,  -- ufix2
              IR_in => Instruction_ROM_out1,  -- ufix12
              IR_out => Instruction_Register_out1  -- ufix12
              );

  -- <S1>/Arithmetic Logical Unit (8-bit)
  u_Arithmetic_Logical_Unit_8_bit : Arithmetic_Logical_Unit_8_bit
    PORT MAP( in_flags => Control_Unit_out2,  -- ufix4
              func => Control_Unit_out3,  -- ufix3
              alu_in => Data_Memory_out1,  -- int8
              AC => Accumulator_out1,  -- int8
              alu_out => Arithmetic_Logical_Unit_8_bit_out1,  -- int8
              out_flags => Arithmetic_Logical_Unit_8_bit_out2  -- ufix4
              );

  -- <S1>/Shifter (8-bit)
  u_Shifter_8_bit : Shifter_8_bit
    PORT MAP( select_rsvd => Control_Unit_out1,  -- ufix2
              input => Arithmetic_Logical_Unit_8_bit_out1,  -- int8
              in_flags => Arithmetic_Logical_Unit_8_bit_out2,  -- ufix4
              out_flags => Shifter_8_bit_out1,  -- ufix4
              shift_out => Shifter_8_bit_out2  -- int8
              );

  -- <S1>/Control Unit
  -- 
  -- <S1>/Data Type Conversion
  u_Control_Unit : Control_Unit
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              data_in => std_logic_vector(feedback_for_indirect_addressing),  -- int8
              in_flags => std_logic_vector(Unit_Delay_3_out1),  -- ufix4
              master_rst => Unit_Delay_7_out1,
              IR_in => std_logic_vector(Unit_Delay_1_out1),  -- ufix12
              shifter_sel => Control_Unit_out1,  -- ufix2
              out_flags => Control_Unit_out2,  -- ufix4
              ALU_func => Control_Unit_out3,  -- ufix3
              print_data => Control_Unit_out4,
              DM_addr => Control_Unit_out5,  -- uint8
              DM_r_w => Control_Unit_out6,  -- ufix1
              AC_func => Control_Unit_out7,  -- ufix3
              AC_data => Control_Unit_out8,  -- int8
              IR_func => Control_Unit_out9,  -- ufix2
              PC_func => Control_Unit_out10,  -- ufix2
              addr_inc => jmp_offset,  -- int8
              IM_read => Control_Unit_out12,  -- ufix1
              hlt => Control_Unit_out13  -- uint8
              );

  -- <S1>/Accumulator
  u_Accumulator : Accumulator
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              func => Control_Unit_out7,  -- ufix3
              AC_in1 => Control_Unit_out8,  -- int8
              AC_in2 => std_logic_vector(Unit_Delay2_out1),  -- int8
              AC_out => Accumulator_out1  -- int8
              );

  -- <S1>/Data Memory
  u_SinglePortRAM_Inst0 : SinglePortRAM_Inst0
    PORT MAP( clk => clk,
              enb => clk_enable,
              din => Accumulator_out1,  -- int8
              addr => Control_Unit_out5,  -- uint8
              we => Control_Unit_out6,
              dout => Data_Memory_out1  -- int8
              );

  -- <S1>/output_enable
  u_output_enable : output_enable
    PORT MAP( u => Data_Memory_out1,  -- int8
              enable => Control_Unit_out4,
              y => output_enable_out1  -- int8
              );

  enb <= clk_enable;

  -- <S1>/Unit Delay 7
  Unit_Delay_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_7_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_7_out1 <= master_reset;
      END IF;
    END IF;
  END PROCESS Unit_Delay_7_process;


  Shifter_8_bit_out2_signed <= signed(Shifter_8_bit_out2);

  -- <S1>/Unit Delay2
  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= to_signed(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= Shifter_8_bit_out2_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  Program_Counter_out1_unsigned <= unsigned(Program_Counter_out1);

  -- <S1>/Unit Delay 4
  Unit_Delay_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_4_out1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_4_out1 <= Program_Counter_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_4_process;


  Instruction_Register_out1_unsigned <= unsigned(Instruction_Register_out1);

  -- <S1>/Unit Delay 1
  Unit_Delay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_1_out1 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_1_out1 <= Instruction_Register_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_1_process;


  Shifter_8_bit_out1_unsigned <= unsigned(Shifter_8_bit_out1);

  -- <S1>/Unit Delay 3
  Unit_Delay_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_3_out1 <= to_unsigned(0, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_3_out1 <= Shifter_8_bit_out1_unsigned;
      END IF;
    END IF;
  END PROCESS Unit_Delay_3_process;


  Data_Memory_out1_signed <= signed(Data_Memory_out1);

  -- <S1>/Unit Delay 5
  Unit_Delay_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      feedback_for_indirect_addressing <= to_signed(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        feedback_for_indirect_addressing <= Data_Memory_out1_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay_5_process;


  output_enable_out1_signed <= signed(output_enable_out1);

  -- <S1>/Unit Delay 6
  Unit_Delay_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay_6_out1 <= to_signed(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay_6_out1 <= output_enable_out1_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay_6_process;


  ext_out <= std_logic_vector(Unit_Delay_6_out1);

  ce_out <= clk_enable;

  Accumulator_out1_signed <= signed(Accumulator_out1);

  -- <S1>/Scope

  hlt <= Control_Unit_out13;

END rtl;

